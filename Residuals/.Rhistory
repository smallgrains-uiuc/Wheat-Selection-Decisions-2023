Vg<- summary(amod1)$varcomp['germplasmName','component']
rel<- 1-(pev/Vg)
reliabilities<- append(reliabilities, mean(rel))
}else{
reliabilities<- append(reliabilities, 0)
}
}
#fit fixed model with best spatial model
asreml.options(ai.sing=TRUE, aom=TRUE)
amod2<- asreml(fixed=as.formula(paste(trt[j], "~1+germplasmName", sep="")),
random= ~blockNumber,
residual= as.formula(resids[which(reliabilities==max(reliabilities))]),
data=sub, na.action = na.method(y='include', x='include'))
amod2<- mkConv(amod2)
blues0<- predict(amod2, classify='germplasmName', pworkspace=64e7)
blues<- data.frame(blues0$pvals, trait=trt[j], study=ustud[i])
blues$rel<- max(reliabilities)
jpeg(paste('Residuals', trt[j], ustud[i], 'jpg', sep="."),
width = 350, height = 350)
plot(amod2$aom$R[,2],
main=paste('Residuals', trt[j], ustud[i], sep="\n"),
ylab='Standard deviations', cex.main=0.75, cex.lab=0.75)
dev.off()
if(i==1 & j==1){
bluesAll<- blues
}else{
bluesAll<- rbind(bluesAll, blues)
}
}
}
}
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('BIG_6phenotype_download_July20.csv', as.is=TRUE)
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']<- NA
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']<- NA
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA
#convert yield and test weight to common units
data[,'Grain.yield...kg.ha.CO_321.0001218']<- convYld(data[,'Grain.yield...kg.ha.CO_321.0001218'])
data[,'Grain.test.weight...g.l.CO_321.0001210']<- convTwt(data[,'Grain.test.weight...g.l.CO_321.0001210'])
data[,"Plant.height...cm.CO_321.0001301"]<- data[,"Plant.height...cm.CO_321.0001301"] *0.393701
colnames(data)<- gsub('kg.ha.CO_321.0001218', "bu.ac", colnames(data))
colnames(data)<- gsub('g.l.CO_321.0001210', "lbs.bu", colnames(data))
colnames(data)<- gsub('..cm.CO_321.0001301', "inches", colnames(data))
colnames(data)<- gsub('..JD..CO_321.0001233', "", colnames(data))
colnames(data)<- gsub('....CO_321.0001198', "", colnames(data))
ustud<- unique(as.character(data$studyName))
for(i in 1:length(ustud)){
#select a single study
sub<- droplevels.data.frame(data[which(data$studyName == ustud[i]),])
#make complete square for spatial analysis
row<- min(sub$rowNumber): max(sub$rowNumber)
col<- min(sub$colNumber): max(sub$colNumber)
rows<- sort(rep(row, length(col)))
cols<- rep(col, length(row))
df<- data.frame(rowNumber= rows, colNumber=cols)
sub<- merge(df, sub, by=c("rowNumber", "colNumber"), all=TRUE)
#change order
sub<- sub[order(sub$rowNumber),]
sub<- sub[order(sub$colNumber),]
#convert to factors
sub$colNumber<- as.factor(sub$colNumber)
sub$rowNumber<- as.factor(sub$rowNumber)
sub$germplasmName<- as.factor(sub$germplasmName)
sub$replicate<- as.factor(sub$replicate)
sub$blockNumber<- as.factor(sub$blockNumber)
sub$studyName<- as.factor(sub$studyName)
#traits
trt<- colnames(sub)[c(42:46)][c(3,2,1,4,5)]
for(j in 1:length(trt)){
if(!is.na(var(sub[,trt[j]], na.rm=TRUE))){
#fit random models
#try different spatial models
resids<- c('~ar1(colNumber):ar1(rowNumber)', '~ar2(colNumber):ar2(rowNumber)',
'~ar3(colNumber):ar3(rowNumber)', '~sar2(colNumber):sar2(rowNumber)')
reliabilities<- c()
for(k in 1:length(resids)){
asreml.options(ai.sing=TRUE, aom=FALSE)
amod1<- try(asreml(fixed=as.formula(paste(trt[j], "~1", sep="")),
random= ~germplasmName+blockNumber,
residual= as.formula(resids[k]),
data=sub, na.action = na.method(y='include', x='include')), silent=TRUE)
if(class(amod1)!="try-error"){
amod1<- mkConv(amod1)
blups<- predict(amod1, classify='germplasmName', ignore=c('(Intercept)'))$pvals
pev<- blups[,'std.error']^2
Vg<- summary(amod1)$varcomp['germplasmName','component']
rel<- 1-(pev/Vg)
reliabilities<- append(reliabilities, mean(rel))
}else{
reliabilities<- append(reliabilities, 0)
}
}
#fit fixed model with best spatial model
asreml.options(ai.sing=TRUE, aom=TRUE)
amod2<- asreml(fixed=as.formula(paste(trt[j], "~1+germplasmName", sep="")),
random= ~blockNumber,
residual= as.formula(resids[which(reliabilities==max(reliabilities))]),
data=sub, na.action = na.method(y='include', x='include'))
amod2<- mkConv(amod2)
blues0<- predict(amod2, classify='germplasmName', pworkspace=64e7)
blues<- data.frame(blues0$pvals, trait=trt[j], study=ustud[i])
blues$rel<- max(reliabilities)
jpeg(paste('Residuals', trt[j], ustud[i], 'jpg', sep="."),
width = 350, height = 350)
plot(amod2$aom$R[,2],
main=paste('Residuals', trt[j], ustud[i], sep="\n"),
ylab='Standard deviations', cex.main=0.75, cex.lab=0.75)
dev.off()
if(i==1 & j==1){
bluesAll<- blues
}else{
bluesAll<- rbind(bluesAll, blues)
}
}
}
}
summary_by(bluesAll, rel~study+trait)
write.csv(bluesAll, file = '~/Documents/GitHub/Wheat-Selection-Decisions-2023/Big6 blues June21.2023.csv')
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('YT Trials 2023.csv', as.is=TRUE)
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']
data[,'Grain.yield...kg.ha.CO_321.0001218']<0
which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0)
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']
data[,'Grain.yield...kg.ha.CO_321.0001218']
range(data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA)
range(data[,'Grain.yield...kg.ha.CO_321.0001218'])
range(data[,'Grain.test.weight...g.l.CO_321.0001210'])
range(data[,'Grain.test.weight...g.l.CO_321.0001210'])
range(data[,'Plant.height...cm.CO_321.0001301'])
range(data[,'Plant.height...cm.CO_321.0001301'], na.rm=TRUE)
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('YT Trials 2023.csv', as.is=TRUE)
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']<- NA
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']<- NA
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA
#convert yield and test weight to common units
data[,'Grain.yield...kg.ha.CO_321.0001218']<- convYld(data[,'Grain.yield...kg.ha.CO_321.0001218'])
data[,'Grain.test.weight...g.l.CO_321.0001210']<- convTwt(data[,'Grain.test.weight...g.l.CO_321.0001210'])
data[,"Plant.height...cm.CO_321.0001301"]<- data[,"Plant.height...cm.CO_321.0001301"] *0.393701
colnames(data)<- gsub('kg.ha.CO_321.0001218', "bu.ac", colnames(data))
colnames(data)<- gsub('g.l.CO_321.0001210', "lbs.bu", colnames(data))
colnames(data)<- gsub('..cm.CO_321.0001301', "inches", colnames(data))
ustud<- unique(as.character(data$studyName))
for(i in 1:length(ustud)){
#select a single study
sub<- droplevels.data.frame(data[which(data$studyName == ustud[i]),])
#make complete square for spatial analysis
row<- min(sub$rowNumber): max(sub$rowNumber)
col<- min(sub$colNumber): max(sub$colNumber)
rows<- sort(rep(row, length(col)))
cols<- rep(col, length(row))
df<- data.frame(rowNumber= rows, colNumber=cols)
sub<- merge(df, sub, by=c("rowNumber", "colNumber"), all=TRUE)
#change order
sub<- sub[order(sub$rowNumber),]
sub<- sub[order(sub$colNumber),]
#convert to factors
sub$colNumber<- as.factor(sub$colNumber)
sub$rowNumber<- as.factor(sub$rowNumber)
sub$germplasmName<- as.factor(sub$germplasmName)
sub$replicate<- as.factor(sub$replicate)
sub$blockNumber<- as.factor(sub$blockNumber)
sub$studyName<- as.factor(sub$studyName)
#traits
trt<- colnames(sub)[c(40:46)][c(3,1,2,4:7)]
for(j in 1:length(trt)){
if(!is.na(var(sub[,trt[j]], na.rm=TRUE))){
#fit random models
#try different spatial models
resids<- c('~ar1(colNumber):ar1(rowNumber)', '~ar2(colNumber):ar2(rowNumber)',
'~ar3(colNumber):ar3(rowNumber)', '~sar2(colNumber):sar2(rowNumber)')
reliabilities<- c()
for(k in 1:length(resids)){
asreml.options(ai.sing=TRUE, aom=FALSE)
amod1<- try(asreml(fixed=as.formula(paste(trt[j], "~1", sep="")),
random= ~germplasmName+blockNumber,
residual= as.formula(resids[k]),
data=sub, na.action = na.method(y='include', x='include')), silent=TRUE)
if(class(amod1)!="try-error"){
amod1<- mkConv(amod1)
blups<- predict(amod1, classify='germplasmName', ignore=c('(Intercept)'))$pvals
pev<- blups[,'std.error']^2
Vg<- summary(amod1)$varcomp['germplasmName','component']
rel<- 1-(pev/Vg)
reliabilities<- append(reliabilities, mean(rel))
}else{
reliabilities<- append(reliabilities, 0)
}
}
#fit fixed model with best spatial model
asreml.options(ai.sing=TRUE, aom=TRUE)
amod2<- asreml(fixed=as.formula(paste(trt[j], "~1+germplasmName", sep="")),
random= ~blockNumber,
residual= as.formula(resids[which(reliabilities==max(reliabilities))]),
data=sub, na.action = na.method(y='include', x='include'))
amod2<- mkConv(amod2)
blues0<- predict(amod2, classify='germplasmName', pworkspace=64e7)
blues<- data.frame(blues0$pvals, trait=trt[j], study=ustud[i])
blues$rel<- max(reliabilities)
jpeg(paste('Residuals', trt[j], ustud[i], 'jpg', sep="."),
width = 350, height = 350)
plot(amod2$aom$R[,2],
main=paste('Residuals', trt[j], ustud[i], sep="\n"),
ylab='Standard deviations', cex.main=0.75, cex.lab=0.75)
dev.off()
if(i==1 & j==1){
bluesAll<- blues
}else{
bluesAll<- rbind(bluesAll, blues)
}
}
}
}
summary_by(bluesAll, rel~study+trait)
write.csv(bluesAll, file = '~/Documents/GitHub/Wheat-Selection-Decisions-2023/YT blues 2023.csv')
head(data)
unique(data$studyName)
colnames(data)
data$plotNumber
data$plotName
colnames(data)
colnames(data)
head(data)
data[which(data$observationUnitName == 'Big6_Prn_23-257'),]
#read data
data<- read.csv('BIG_6phenotype_download_July20.csv', as.is=TRUE)
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('BIG_6phenotype_download_July20.csv', as.is=TRUE)
#change -9 to NA
data[which(data$observationUnitName == 'Big6_Prn_23-257'),]
colnames(data)
data[which(data$observationUnitName == 'Big6_Prn_23-257'),'Grain.yield...kg.ha.CO_321.0001218']
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('BIG_6phenotype_download_July20.csv', as.is=TRUE)
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']<- NA
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']<- NA
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA
#convert yield and test weight to common units
data[,'Grain.yield...kg.ha.CO_321.0001218']<- convYld(data[,'Grain.yield...kg.ha.CO_321.0001218'])
data[,'Grain.test.weight...g.l.CO_321.0001210']<- convTwt(data[,'Grain.test.weight...g.l.CO_321.0001210'])
data[,"Plant.height...cm.CO_321.0001301"]<- data[,"Plant.height...cm.CO_321.0001301"] *0.393701
colnames(data)<- gsub('kg.ha.CO_321.0001218', "bu.ac", colnames(data))
colnames(data)<- gsub('g.l.CO_321.0001210', "lbs.bu", colnames(data))
colnames(data)<- gsub('..cm.CO_321.0001301', "inches", colnames(data))
colnames(data)<- gsub('..JD..CO_321.0001233', "", colnames(data))
colnames(data)<- gsub('....CO_321.0001198', "", colnames(data))
#change -9 to NA
data[which(data$observationUnitName == 'Big6_Prn_23-257'),'Grain.yield...kg.ha.CO_321.0001218']
colnames(data)
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('BIG_6phenotype_download_July20.csv', as.is=TRUE)
setwd("~/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']<- NA
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']<- NA
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA
#convert yield and test weight to common units
data[,'Grain.yield...kg.ha.CO_321.0001218']<- convYld(data[,'Grain.yield...kg.ha.CO_321.0001218'])
data[,'Grain.test.weight...g.l.CO_321.0001210']<- convTwt(data[,'Grain.test.weight...g.l.CO_321.0001210'])
data[,"Plant.height...cm.CO_321.0001301"]<- data[,"Plant.height...cm.CO_321.0001301"] *0.393701
colnames(data)<- gsub('kg.ha.CO_321.0001218', "bu.ac", colnames(data))
colnames(data)<- gsub('g.l.CO_321.0001210', "lbs.bu", colnames(data))
colnames(data)<- gsub('..cm.CO_321.0001301', "inches", colnames(data))
colnames(data)<- gsub('..JD..CO_321.0001233', "", colnames(data))
colnames(data)<- gsub('....CO_321.0001198', "", colnames(data))
#change -9 to NA
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-365'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Fre_23-60'),"Grain.yield...bu.ac"]<- NA
ustud<- unique(as.character(data$studyName))
for(i in 1:length(ustud)){
#select a single study
sub<- droplevels.data.frame(data[which(data$studyName == ustud[i]),])
#make complete square for spatial analysis
row<- min(sub$rowNumber): max(sub$rowNumber)
col<- min(sub$colNumber): max(sub$colNumber)
rows<- sort(rep(row, length(col)))
cols<- rep(col, length(row))
df<- data.frame(rowNumber= rows, colNumber=cols)
sub<- merge(df, sub, by=c("rowNumber", "colNumber"), all=TRUE)
#change order
sub<- sub[order(sub$rowNumber),]
sub<- sub[order(sub$colNumber),]
#convert to factors
sub$colNumber<- as.factor(sub$colNumber)
sub$rowNumber<- as.factor(sub$rowNumber)
sub$germplasmName<- as.factor(sub$germplasmName)
sub$replicate<- as.factor(sub$replicate)
sub$blockNumber<- as.factor(sub$blockNumber)
sub$studyName<- as.factor(sub$studyName)
#traits
trt<- colnames(sub)[c(42:46)][c(3,2,1,4,5)]
for(j in 1:length(trt)){
if(!is.na(var(sub[,trt[j]], na.rm=TRUE))){
#fit random models
#try different spatial models
resids<- c('~ar1(colNumber):ar1(rowNumber)', '~ar2(colNumber):ar2(rowNumber)',
'~ar3(colNumber):ar3(rowNumber)', '~sar2(colNumber):sar2(rowNumber)')
reliabilities<- c()
for(k in 1:length(resids)){
asreml.options(ai.sing=TRUE, aom=FALSE)
amod1<- try(asreml(fixed=as.formula(paste(trt[j], "~1", sep="")),
random= ~germplasmName+blockNumber,
residual= as.formula(resids[k]),
data=sub, na.action = na.method(y='include', x='include')), silent=TRUE)
if(class(amod1)!="try-error"){
amod1<- mkConv(amod1)
blups<- predict(amod1, classify='germplasmName', ignore=c('(Intercept)'))$pvals
pev<- blups[,'std.error']^2
Vg<- summary(amod1)$varcomp['germplasmName','component']
rel<- 1-(pev/Vg)
reliabilities<- append(reliabilities, mean(rel))
}else{
reliabilities<- append(reliabilities, 0)
}
}
#fit fixed model with best spatial model
asreml.options(ai.sing=TRUE, aom=TRUE)
amod2<- asreml(fixed=as.formula(paste(trt[j], "~1+germplasmName", sep="")),
random= ~blockNumber,
residual= as.formula(resids[which(reliabilities==max(reliabilities))]),
data=sub, na.action = na.method(y='include', x='include'))
amod2<- mkConv(amod2)
blues0<- predict(amod2, classify='germplasmName', pworkspace=64e7)
blues<- data.frame(blues0$pvals, trait=trt[j], study=ustud[i])
blues$rel<- max(reliabilities)
jpeg(paste('Residuals', trt[j], ustud[i], 'jpg', sep="."),
width = 350, height = 350)
plot(amod2$aom$R[,2],
main=paste('Residuals', trt[j], ustud[i], sep="\n"),
ylab='Standard deviations', cex.main=0.75, cex.lab=0.75)
dev.off()
if(i==1 & j==1){
bluesAll<- blues
}else{
bluesAll<- rbind(bluesAll, blues)
}
}
}
}
