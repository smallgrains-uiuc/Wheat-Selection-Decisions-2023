mod<- asreml(fixed=predicted.value~1,
random=~site+fa(site, 2):germplasmName,
weights=wt,
data=dataDH,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
mod<- mkConv(mod)
dhBLUP.Big6<- predict(mod, classify='site:germplasmName')$pvals
dhBLUP.Big6$predicted.value2<- round(dhBLUP.Big6$predicted.value,2)
wide.faBLUPdh<- cast(dhBLUP.Big6, germplasmName~site, value='predicted.value2')
wide.faBLUPdh<- wide.faBLUPdh[,c("germplasmName", 'Urb_23',
'Prn_23', 'Woo_23', 'Mas_23', 'Laf_23', 'Vin_23')]
write.csv(wide.faBLUPdh, file='Big6.Heading-FABLUPs.csv')
######Heigth data
dataHT<- droplevels.data.frame(data[which(data$trait=='Plant.height.inches'),])
#combined model without the relationship matrix
dataHT$site<- as.factor(dataHT$site)
dataHT$germplasmName<- as.factor(dataHT$germplasmName)
dataHT$wt<- c(1/(dataHT$std.error^2))
dataHT<- na.omit(dataHT)
mod<- asreml(fixed=predicted.value~1,
random=~site+fa(site, 2):germplasmName,
weights=wt,
data=dataHT,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
mod<- asreml(fixed=predicted.value~1,
random=~site+fa(site, 2):germplasmName,
weights=wt,
data=dataHT,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
mod<- asreml(fixed=predicted.value~1,
random=~site+germplasmName,
weights=wt,
data=dataHT,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
wr
wt
dataHT$wt
######Heigth data
dataHT<- droplevels.data.frame(data[which(data$trait=='Plant.height.inches'),])
dataHT
data$trait
unique(data$trait)
head(Data)
#read data
data<- read.csv('BIG_6phenotype_download_Aug29.csv', as.is=TRUE)
head(data)
data$Plant.height...cm.CO_321.0001301
table(data$Plant.height...cm.CO_321.0001301)
data[which(data$observationUnitName == 'Big6_Urb_23-77'),"Plant.height.inches"]
data[which(data$observationUnitName == 'Big6_Urb_23-77'),"Plant.height...cm.CO_321.0001301"]
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('BIG_6phenotype_download_Aug29.csv', as.is=TRUE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']<- NA
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']<- NA
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA
#convert yield and test weight to common units
data[,'Grain.yield...kg.ha.CO_321.0001218']<- convYld(data[,'Grain.yield...kg.ha.CO_321.0001218'])
data[,'Grain.test.weight...g.l.CO_321.0001210']<- convTwt(data[,'Grain.test.weight...g.l.CO_321.0001210'])
data[,"Plant.height...cm.CO_321.0001301"]<- data[,"Plant.height...cm.CO_321.0001301"] *0.393701
colnames(data)<- gsub('kg.ha.CO_321.0001218', "bu.ac", colnames(data))
colnames(data)<- gsub('g.l.CO_321.0001210', "lbs.bu", colnames(data))
colnames(data)<- gsub('..cm.CO_321.0001301', "inches", colnames(data))
colnames(data)<- gsub('..JD..CO_321.0001233', "", colnames(data))
colnames(data)<- gsub('....CO_321.0001198', "", colnames(data))
#curate some outliers
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-365'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Fre_23-60'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Urb_23-77'),"Plant.height.inches"]<- NA
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('BIG_6phenotype_download_Aug29.csv', as.is=TRUE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']<- NA
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']<- NA
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA
#convert yield and test weight to common units
data[,'Grain.yield...kg.ha.CO_321.0001218']<- convYld(data[,'Grain.yield...kg.ha.CO_321.0001218'])
data[,'Grain.test.weight...g.l.CO_321.0001210']<- convTwt(data[,'Grain.test.weight...g.l.CO_321.0001210'])
data[,"Plant.height...cm.CO_321.0001301"]<- data[,"Plant.height...cm.CO_321.0001301"] *0.393701
colnames(data)<- gsub('kg.ha.CO_321.0001218', "bu.ac", colnames(data))
colnames(data)<- gsub('g.l.CO_321.0001210', "lbs.bu", colnames(data))
colnames(data)<- gsub('..cm.CO_321.0001301', "inches", colnames(data))
colnames(data)<- gsub('..JD..CO_321.0001233', "", colnames(data))
colnames(data)<- gsub('....CO_321.0001198', "", colnames(data))
#curate some outliers
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-365'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Fre_23-60'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Urb_23-77'),"Plant.height.inches"]<- NA
ustud<- unique(as.character(data$studyName))
for(i in 1:length(ustud)){
#select a single study
sub<- droplevels.data.frame(data[which(data$studyName == ustud[i]),])
#make complete square for spatial analysis
row<- min(sub$rowNumber): max(sub$rowNumber)
col<- min(sub$colNumber): max(sub$colNumber)
rows<- sort(rep(row, length(col)))
cols<- rep(col, length(row))
df<- data.frame(rowNumber= rows, colNumber=cols)
sub<- merge(df, sub, by=c("rowNumber", "colNumber"), all=TRUE)
#change order
sub<- sub[order(sub$rowNumber),]
sub<- sub[order(sub$colNumber),]
#convert to factors
sub$colNumber<- as.factor(sub$colNumber)
sub$rowNumber<- as.factor(sub$rowNumber)
sub$germplasmName<- as.factor(sub$germplasmName)
sub$replicate<- as.factor(sub$replicate)
sub$blockNumber<- as.factor(sub$blockNumber)
sub$studyName<- as.factor(sub$studyName)
#traits
trt<- colnames(sub)[c(42:46)][c(3,2,1,4,5)]
for(j in 1:length(trt)){
if(!is.na(var(sub[,trt[j]], na.rm=TRUE))){
#fit random models
#try different spatial models
resids<- c('~ar1(colNumber):ar1(rowNumber)', '~ar2(colNumber):ar2(rowNumber)',
'~ar3(colNumber):ar3(rowNumber)', '~sar2(colNumber):sar2(rowNumber)')
reliabilities<- c()
for(k in 1:length(resids)){
asreml.options(ai.sing=TRUE, aom=FALSE)
amod1<- try(asreml(fixed=as.formula(paste(trt[j], "~1", sep="")),
random= ~germplasmName+blockNumber,
residual= as.formula(resids[k]),
data=sub, na.action = na.method(y='include', x='include')), silent=TRUE)
if(class(amod1)!="try-error"){
amod1<- mkConv(amod1)
blups<- predict(amod1, classify='germplasmName', ignore=c('(Intercept)'))$pvals
pev<- blups[,'std.error']^2
Vg<- summary(amod1)$varcomp['germplasmName','component']
rel<- 1-(pev/Vg)
reliabilities<- append(reliabilities, mean(rel))
}else{
reliabilities<- append(reliabilities, 0)
}
}
#fit fixed model with best spatial model
asreml.options(ai.sing=TRUE, aom=TRUE)
amod2<- asreml(fixed=as.formula(paste(trt[j], "~1+germplasmName", sep="")),
random= ~blockNumber,
residual= as.formula(resids[which(reliabilities==max(reliabilities))]),
data=sub, na.action = na.method(y='include', x='include'))
amod2<- mkConv(amod2)
blues0<- predict(amod2, classify='germplasmName', pworkspace=64e7)
blues<- data.frame(blues0$pvals, trait=trt[j], study=ustud[i])
blues$rel<- max(reliabilities)
jpeg(paste('Residuals', trt[j], ustud[i], 'jpg', sep="."),
width = 350, height = 350)
plot(amod2$aom$R[,2],
main=paste('Residuals', trt[j], ustud[i], sep="\n"),
ylab='Standard deviations', cex.main=0.75, cex.lab=0.75)
dev.off()
if(i==1 & j==1){
bluesAll<- blues
}else{
bluesAll<- rbind(bluesAll, blues)
}
}
}
}
summary_by(bluesAll, rel~study+trait)
colnames(sub)
trt<- colnames(sub)[c(42:47)][c(3,2,1,4,5, 6)]
trt
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read data
data<- read.csv('BIG_6phenotype_download_Aug29.csv', as.is=TRUE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023/Residuals")
############################
## Data conversions
############################
#convert yld to bu/acre
convYld<- function(y){
x<- y/c(60 * 0.453592 * 2.47105)
return(x)
}
#convert tw to lbs/bu
convTwt<- function(y){
x<- y/1000 *2.2046 *35.2391
return(x)
}
#make converge
mkConv<- function(mod){
pctchg<- summary(mod)$varcomp[,c('%ch')]
tries<-1
while(any(pctchg >1, na.rm=TRUE) & tries < 20){
tries<- tries+1
mod<-suppressWarnings(update(mod))
pctchg<- summary(mod)$varcomp[,c('%ch')]
}
return(mod)
}
#change -9 to NA
data[which(data[,'Grain.yield...kg.ha.CO_321.0001218']<0),'Grain.yield...kg.ha.CO_321.0001218']<- NA
data[which(data[,'Grain.test.weight...g.l.CO_321.0001210']<0),'Grain.test.weight...g.l.CO_321.0001210']<- NA
data[which(data[,'Plant.height...cm.CO_321.0001301']<0),'Plant.height...cm.CO_321.0001301']<- NA
data[which(data[,'Heading.time...Julian.date..JD..CO_321.0001233']<0),'Heading.time...Julian.date..JD..CO_321.0001233']<- NA
data[which(data[,'Grain.moisture.content.....CO_321.0001198']<0),'Grain.moisture.content.....CO_321.0001198']<- NA
#convert yield and test weight to common units
data[,'Grain.yield...kg.ha.CO_321.0001218']<- convYld(data[,'Grain.yield...kg.ha.CO_321.0001218'])
data[,'Grain.test.weight...g.l.CO_321.0001210']<- convTwt(data[,'Grain.test.weight...g.l.CO_321.0001210'])
data[,"Plant.height...cm.CO_321.0001301"]<- data[,"Plant.height...cm.CO_321.0001301"] *0.393701
colnames(data)<- gsub('kg.ha.CO_321.0001218', "bu.ac", colnames(data))
colnames(data)<- gsub('g.l.CO_321.0001210', "lbs.bu", colnames(data))
colnames(data)<- gsub('..cm.CO_321.0001301', "inches", colnames(data))
colnames(data)<- gsub('..JD..CO_321.0001233', "", colnames(data))
colnames(data)<- gsub('....CO_321.0001198', "", colnames(data))
#curate some outliers
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-257'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-32'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-333'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Prn_23-365'),"Grain.test.weight...lbs.bu"]<- NA
data[which(data$observationUnitName == 'Big6_Fre_23-60'),"Grain.yield...bu.ac"]<- NA
data[which(data$observationUnitName == 'Big6_Urb_23-77'),"Plant.height.inches"]<- NA
ustud<- unique(as.character(data$studyName))
for(i in 1:length(ustud)){
#select a single study
sub<- droplevels.data.frame(data[which(data$studyName == ustud[i]),])
#make complete square for spatial analysis
row<- min(sub$rowNumber): max(sub$rowNumber)
col<- min(sub$colNumber): max(sub$colNumber)
rows<- sort(rep(row, length(col)))
cols<- rep(col, length(row))
df<- data.frame(rowNumber= rows, colNumber=cols)
sub<- merge(df, sub, by=c("rowNumber", "colNumber"), all=TRUE)
#change order
sub<- sub[order(sub$rowNumber),]
sub<- sub[order(sub$colNumber),]
#convert to factors
sub$colNumber<- as.factor(sub$colNumber)
sub$rowNumber<- as.factor(sub$rowNumber)
sub$germplasmName<- as.factor(sub$germplasmName)
sub$replicate<- as.factor(sub$replicate)
sub$blockNumber<- as.factor(sub$blockNumber)
sub$studyName<- as.factor(sub$studyName)
#traits
trt<- colnames(sub)[c(42:47)][c(3,2,1,4,5, 6)]
for(j in 1:length(trt)){
if(!is.na(var(sub[,trt[j]], na.rm=TRUE))){
#fit random models
#try different spatial models
resids<- c('~ar1(colNumber):ar1(rowNumber)', '~ar2(colNumber):ar2(rowNumber)',
'~ar3(colNumber):ar3(rowNumber)', '~sar2(colNumber):sar2(rowNumber)')
reliabilities<- c()
for(k in 1:length(resids)){
asreml.options(ai.sing=TRUE, aom=FALSE)
amod1<- try(asreml(fixed=as.formula(paste(trt[j], "~1", sep="")),
random= ~germplasmName+blockNumber,
residual= as.formula(resids[k]),
data=sub, na.action = na.method(y='include', x='include')), silent=TRUE)
if(class(amod1)!="try-error"){
amod1<- mkConv(amod1)
blups<- predict(amod1, classify='germplasmName', ignore=c('(Intercept)'))$pvals
pev<- blups[,'std.error']^2
Vg<- summary(amod1)$varcomp['germplasmName','component']
rel<- 1-(pev/Vg)
reliabilities<- append(reliabilities, mean(rel))
}else{
reliabilities<- append(reliabilities, 0)
}
}
#fit fixed model with best spatial model
asreml.options(ai.sing=TRUE, aom=TRUE)
amod2<- asreml(fixed=as.formula(paste(trt[j], "~1+germplasmName", sep="")),
random= ~blockNumber,
residual= as.formula(resids[which(reliabilities==max(reliabilities))]),
data=sub, na.action = na.method(y='include', x='include'))
amod2<- mkConv(amod2)
blues0<- predict(amod2, classify='germplasmName', pworkspace=64e7)
blues<- data.frame(blues0$pvals, trait=trt[j], study=ustud[i])
blues$rel<- max(reliabilities)
jpeg(paste('Residuals', trt[j], ustud[i], 'jpg', sep="."),
width = 350, height = 350)
plot(amod2$aom$R[,2],
main=paste('Residuals', trt[j], ustud[i], sep="\n"),
ylab='Standard deviations', cex.main=0.75, cex.lab=0.75)
dev.off()
if(i==1 & j==1){
bluesAll<- blues
}else{
bluesAll<- rbind(bluesAll, blues)
}
}
}
}
summary_by(bluesAll, rel~study+trait)
write.csv(bluesAll, file = '~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023/Big6 blues Aug29.2023.csv')
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/GitHub/Wheat-Selection-Decisions-2023")
library(asreml)
library(reshape)
library(doBy)
#read in new Big6 trial results
data<- read.csv('Big6 blues Aug29.2023.csv', as.is=TRUE, row.names=1)
q<- matrix(unlist(strsplit(data$study, split="_")), nrow=3)
data$loc<- q[2,]
data$year<- q[3,]
data$site<- paste(data$loc, data$year, sep="_")
data$wt<- 1/(data$std.error^2)
#make summary table
data$predicted.value2<- round(data$predicted.value, 2)
wide<- cast(data, germplasmName~trait+study, value='predicted.value2')
write.csv(wide, file='Big6 blues Aug29.2023-wide.csv')
######YIELD data
dataGY<- droplevels.data.frame(data[which(data$trait=='Grain.yield...bu.ac'),])
#combined model without the relationship matrix
dataGY$site<- as.factor(dataGY$site)
dataGY$germplasmName<- as.factor(dataGY$germplasmName)
dataGY$wt<- c(1/(dataGY$std.error^2))
dataGY<- na.omit(dataGY)
mod<- asreml(fixed=predicted.value~1,
random=~site+fa(site, 2):germplasmName,
weights=wt,
data=dataGY,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
mod<- mkConv(mod)
yldBLUP.Big6<- predict(mod, classify='site:germplasmName')$pvals
yldBLUP.Big6$predicted.value2<- round(yldBLUP.Big6$predicted.value,2)
wide.faBLUP<- cast(yldBLUP.Big6, germplasmName~site, value='predicted.value2')
write.csv(wide.faBLUP, file='Big6.Yield-FABLUPs.csv')
######Days to Heading data
dataDH<- droplevels.data.frame(data[which(data$trait=='Heading.time...Julian.date'),])
#combined model without the relationship matrix
dataDH$site<- as.factor(dataDH$site)
dataDH$germplasmName<- as.factor(dataDH$germplasmName)
dataDH$wt<- c(1/(dataDH$std.error^2))
dataDH<- na.omit(dataDH)
mod<- asreml(fixed=predicted.value~1,
random=~site+fa(site, 2):germplasmName,
weights=wt,
data=dataDH,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
mod<- mkConv(mod)
dhBLUP.Big6<- predict(mod, classify='site:germplasmName')$pvals
dhBLUP.Big6$predicted.value2<- round(dhBLUP.Big6$predicted.value,2)
wide.faBLUPdh<- cast(dhBLUP.Big6, germplasmName~site, value='predicted.value2')
wide.faBLUPdh<- wide.faBLUPdh[,c("germplasmName", 'Urb_23',
'Prn_23', 'Woo_23', 'Mas_23', 'Laf_23', 'Vin_23')]
write.csv(wide.faBLUPdh, file='Big6.Heading-FABLUPs.csv')
######Heigth data
dataHT<- droplevels.data.frame(data[which(data$trait=='Plant.height.inches'),])
#combined model without the relationship matrix
dataHT$site<- as.factor(dataHT$site)
dataHT$germplasmName<- as.factor(dataHT$germplasmName)
dataHT$wt<- c(1/(dataHT$std.error^2))
dataHT<- na.omit(dataHT)
mod<- asreml(fixed=predicted.value~1,
random=~site+fa(site, 2):germplasmName,
weights=wt,
data=dataHT,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
mod<- mkConv(mod)
htBLUP.Big6<- predict(mod, classify='site:germplasmName')$pvals
htBLUP.Big6$predicted.value2<- round(htBLUP.Big6$predicted.value,2)
wide.faBLUPht<- cast(htBLUP.Big6, germplasmName~site, value='predicted.value2')
wide.faBLUPht<- wide.faBLUPht[,c("germplasmName", 'Urb_23',
'Prn_23', 'Woo_23', 'Mas_23')]
write.csv(wide.faBLUPht, file='Big6.Height-FABLUPs.csv')
######Test weigtwt data
datatwt<- droplevels.data.frame(data[which(data$trait=='Grain.test.weight...lbs.bu'),])
#combined model without the relationship matrix
datatwt$site<- as.factor(datatwt$site)
datatwt$germplasmName<- as.factor(datatwt$germplasmName)
datatwt$wt<- c(1/(datatwt$std.error^2))
datatwt<- na.omit(datatwt)
mod<- asreml(fixed=predicted.value~1,
random=~site+fa(site, 2):germplasmName,
weights=wt,
data=datatwt,
na.action = na.method(y='include', x='include'),
family=asr_gaussian(dispersion = 1))
mod<- mkConv(mod)
twtBLUP.Big6<- predict(mod, classify='site:germplasmName')$pvals
twtBLUP.Big6$predicted.value2<- round(twtBLUP.Big6$predicted.value,2)
wide.faBLUPtwt<- cast(twtBLUP.Big6, germplasmName~site, value='predicted.value2')
wide.faBLUPtwt<- wide.faBLUPtwt[,c("germplasmName", "Fre_23", 'Urb_23', "Fra_23",
'Prn_23', 'Woo_23', 'Mas_23', 'Laf_23', 'Vin_23')]
write.csv(wide.faBLUPtwt, file='Big6.Testweight-FABLUPs.csv')
#Site correlations
#site correlation matrix
met.corr <-function(object,site,faN=2){ # ,faRS=1
n<-nlevels(site)
varcomp<-summary(object)$varcomp['component']
vcn<-row.names(varcomp)
aimn<-vcn[grep('fa\\(.*,.*\\)',vcn)]
varcomp1<-varcomp[aimn,]
vect1<-varcomp1[1:n]
w.var<-diag(vect1)
vect2<-varcomp1[(n+1):((1+faN)*n)]
L.var<-matrix(vect2,nrow=n)
wL.var<-L.var%*%t(L.var)+w.var
df<-wL.var
for(i in 1:(n-1)){
for(j in 2:n){
if(i<j){df[i,j]<-df[j,i]/(sqrt(df[i,i]*df[j,j]))
j<-j+1}
}
i<-i+1
}
rownames(df)<-levels(site)
colnames(df)<-levels(site)
df.2<-df
for(i in 1:(n-1)){
for(j in 2:n){
if(i<j){df[j,i]<-df[i,j]
j<-j+1}
}
i<-i+1
}
diag(df)<-1
return(df)
}
df<- met.corr(mod, unique(dataGY$site, 2))
heatmap(df)
df<- round(df, 2)
write.csv(df, 'siteCorrelations.Big6-2023.csv')
df
heatmap(df)
heatmap(df)
df<- met.corr(mod, unique(dataGY$site, 2))
df
heatmap(df)
df<- met.corr(mod, unique(dataGY$site, 2))
heatmap(df)
?heatmap
heatmap(df, symm=TRUE)
?heatmap
